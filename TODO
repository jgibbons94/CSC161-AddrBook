Goals from this file will change - to + when completed

+The Contact class should still uselize composition so that it has a Name object and Address object. Change the access mode of the data members to protected for all data members.
+Implement the CategorizedContact class:
	+ files: CagegorizedContact.{h,cpp}
	+ Publc Single Inheritance on Contact
	+ Data Member: Category as string
	+ Private data and public get/set functions
	+ Default constructors and constructors that take parameters (take default parameters)
	+ ToString member function formatted for output window: string ToString() const;
	+ ToFileString member function formatted for file: string ToFileString() const;
	+ Implemented with a unique macro guard
	
+Implement the Field class:
	+ files: Field.{h,cpp}
	+ Public single inheritance with string
	+ No data members
	+ Default constructor, constructor(const char*), constructor(string &)
	+ Input stream operator >> extraction
	+ InFile stream operator >> for extraction
	+ Implemented with unique macro guard

+Change all references from string to field in:
	+the Name, 
	+Address, 
	+Contact class,
	+CategorizedContact class,
	+AddrBook data structure class and 
	+AddrTest main console program.

+ Use the overloaded operator>> with the Fields for file input
+ Use the overload operator>> with the Fields for console input

+Update AddrBook data structure:
	+ A bag collection of CategorizedContact objects that uses a static array as the underlying data structure (set to fixed size of 5)
	+ Required member functions:
	
		+ void AddContact(CategorizedContact itemToAdd);
		+ void RemoveItem(CategorizedContact itemToRemove);
		+ int FindItem(CategorizedContact itemToFind);
		+ void RemoveByIndex(int indexToRemove);
		+ void PrintAllItems();
		+ void PrintByCategory(Field category);
		+ int GetUsed();
		+ CategorizedContact getItem(int index);
		+ void ReadFile(string fileName);
		+ void WriteFile(string fileName);
+Program must connect to address.csv and populate the AddrBook data structure based on the following format:

categoryName,fname1,lname1,street address1,city1,state1,zip1,phone1,email1,bday1,picture file1,
categoryNamefname2,lname2,street address2,city2,state2,zip2,phone2,email2,bday2,picture file2,

+Once main starts, program should read from file and store all data in AddrBook data structure
+The program will add, remove CategorizedContact items from AddrBook data structure
+Before exiting main, entire AddrBook data structure is written to Address.csv overwriting all data in the file.


- Menu:
+1. Add a new Categorized Contact to the AddressBook
    Prompt for Category by using menu items below:	
    (a) Work
    (b) Family
    (c) Friends
    (d) Other
    Prompt for First Name		
    Prompt for Last Name
    Prompt for Street Address
    Prompt for City Address
    Prompt for State Address
    Prompt for Zip Address
    Prompt for Phone Number
    Prompt for Email Address
    Prompt for Birthday
    Prompt for Picture File
+2. Find out how many items are in the AddressBook
+3. Print out all the items in the AddressBook based upon category selection from menu below: 
    (Print a counter in front of each contact - starting at 1)	
    (a) Work
    (b) Family
    (c) Friends
    (d) Other
    (e) All Contacts	
+4. Delete an item from the AddressBook
    Prompt for the item number to dele&te (counting number starting at 1)
+5. Exit the Program

+must incorporate Scott Miner's UI.

Additional changes:
+Change back the AddrBook function names. This is annoying.
+ replace Scott's CPU-intense wait function with the C++11 sleep function in the thread library, make it sleep for two seconds.
+ Make the print() not so clunky.
+ Use const references for setters.
+ Rename MyFuncs.h to AddrTest.h
+ Merge MyFuncs.cpp into AddrTest.cpp
+ Use const type & for constructors.
+ Make sure all class declarations (headers) have descriptions for the defined class.
+ Make unit tests to make sure everything works like it should.
+ clean up.
	+ Remove commented-out functions.
	+ Remove unused functions
	+ ctrl+a ctrl + k + f on every file.
	+ evenly space the functions.
	+ add precondition and postcondition comments below whatever function they reference.
+ build tests
