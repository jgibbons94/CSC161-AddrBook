- Update the AddrBook Collection class to use a dynamic array as the underlying data structure storing CategorizedContact objects from the CategorizedContact class.
	- Modify the add member function so that it grows the dynamic array in size when needed - no need to handle the shrinking of the array though, it generally isn't done because of efficiency and performance.
	- Implement and Test the Copy Constructor
	- Implement and Test the Destructor
	- Implement and Test the Assignment operator
	- Implement Alloc private member function to do all allocation of memory
	- Implement Free private member function to do all deallocation of memory
Name, Address, Contact and CategorizedContact class modifications - operators
	- All operators need to be written to not be redundant and reuse. Look at having child operators call parent operators. Look at having operators call their opposite counterpart (== and !=, < and >=). Look at putting operators together (if > and == are done, then >= is done too and have it call the other two operators).
	- Name class:
		- Overload the logical operators (<, >, <=, >=, ==, !=) so that it compares LastName, FirstName
		- Overload the insertion operator (<<) for both ostream and ofstream
		- overload the extraction operator (>>) for both istream and ifstream
	- Address class:
		- Overload the insertion operator (<<) for both ostream and ofstream
		- overload the extraction operator (>>) for both istream and ifstream
	- Contact class:
		- Overload the logical operators (<, >, <=, >=, ==, !=) so that these operators call on the Name class logical operators
		- Overload the insertion operator (<<) for both ostream and ofstream
		- overload the extraction operator (>>) for both istream and ifstream
	- CategorizedContact class:
		- Overload the insertion operator (<<) for both ostream and ofstream
		- overload the extraction operator (>>) for both istream and ifstream
	- Your program needs to connect to address.csv and populate the AddrBook data structure based upon the following format of the address.csv file
	- Once the main program starts, the program should read from the file (address.csv) and store all the data in the AddrBook data structure.
	- The program will then add, remove CategorizedContact items from the AddrBook data structure.
	- Before exiting the main program, the entire AddrBook data structure should be written to the address.csv file (overwriting all data in the file)
		categoryName,fname1,lname1,street address1,city1,state1,zip1,phone1,email1,bday1,picture file1,
		categoryName,fname2,lname2,street address2,city2,state2,zip2,phone2,email2,bday2,picture file2,
	- Update a menu driven console program (int main) named AddrTest utilizing the above classes and specifications:
		1. Add a new Categorized Contact to the AddressBook
			Prompt for Category by using menu items below:	
			(a) Work
			(b) Family
			(c) Friends
			(d) Other
			Prompt for First Name		
			Prompt for Last Name
			Prompt for Street Address
			Prompt for City Address
			Prompt for State Address
			Prompt for Zip Address
			Prompt for Phone Number
			Prompt for Email Address
			Prompt for Birthday
			Prompt for Picture File
		2. Find out how many items are in the AddressBook
		3. Print out all the items in the AddressBook based upon category selection from menu below: 
			(Print a counter in front of each contact - starting at 1)	
			(a) Work
			(b) Family
			(c) Friends
			(d) Other
			(e) All Contacts	
		4. Delete an item from the AddressBook
			Prompt for the item number to delete (counting number starting at 1)
		5. Exit the Program
	- Update unit tests
		- ToString() should check for alignment of colons
		- ToString() should check for included information
		- Figure out how to unit test alloc() and free(). Maybe use try{}catch(){}?
	- Fix whatever was wrong with project 2
	- clean up
		- Make sure all source say I wrote them
		- Make sure all headers have class descriptions.
		- Make sure to comment parts of code.
		- Make sure naming is consistent.